Your team wants to use an application called fluentd to transform log output from containers into a standard format. 
In order to make use of this technology, they have asked you to design a proof-of-concept to demonstrate how this can be done. 
You will need to run a container that generates some log output in a file, then run a second container with fluentd that is able to read the log output from 
the first container, transform it, and output the transformed data to another file on the host machine. 
You do not need to have knowledge of fluentd to complete this task. A fluentd configuration file has already been provided for you.

The proof-of-concept should meet the following specifications:

------------------------------------------------------------------------------------------------------------------------------------------------------------
1. The first container should be called counter. It will generate some log data for testing by counting numbers.
For the counter container, use the busybox image with the following command: sh -c 'i=0; while true; do echo "$i: $(date)" >> /var/log/test/1.log; i=$((i+1)); sleep 1; done'. This will write some test data to /var/log/test/1.log every second.

vi Dockerfile

FROM busybox
CMD sh -c 'i=0; while true; do echo "$i: $(date)" >> /var/log/test/1.log; i=$((i+1)); sleep 1; done'

ubuntu@ip-172-31-29-245:~/dockerassign$ docker build -t busybox:new .
Sending build context to Docker daemon  2.048kB
Step 1/2 : FROM busybox
 ---> 78096d0a5478
Step 2/2 : CMD sh -c 'i=0; while true; do echo "$i: $(date)" >> /var/log/test/1.log; i=$((i+1)); sleep 1; done'
 ---> Running in 0e799e28515c
Removing intermediate container 0e799e28515c
 ---> f97703c4f251
Successfully built f97703c4f251
Successfully tagged busybox:new

	
docker run -d --name counter -v test-data:/var/log/test busybox:new


-------------------------------------------------------------------------------------------------------------------------------------------------------------

2. Create a volume called test-data, and mount it to the counter container at /var/log/test. This volume will be shared with the fluentd container so that it can 
read the test data.

docker volume create test-data

------------------------------------------------------------------------------------------------------------------------------------------------------------

3. Create a second container called fluentd with the k8s.gcr.io/fluentd-gcp:1.30 image.
4. Provide an environment variable to the fluentd container called FLUENTD_ARGS with the value -c /fluentd/etc/fluent.conf
5. Mount the test-data volume to the fluentd container at /var/log/input.
6. There is a fluentd configuration file located on the server at /etc/fluentd/fluent.conf. Use a bind mount to mount this file to the fluentd container at /fluentd/etc/fluent.conf.
7. Create an additional bind mount so that the fluentd container can output the transformed log data to the host's file system. Mount the directory /etc/fluentd/output on the host to /var/log/output on the fluentd container.

docker run -d --name fluentd -v test-data:/var/log/input \
-v /home/kishor/dockerasignments/28/fluent.conf:/fluentd/etc/fluent.conf \
-v /home/kishor/dockerasignments/28/output:/var/log/output \
-e FLUENTD_ARGS= '-c /fluentd/etc/fluent.conf' \
k8s.gcr.io/fluentd-gcp:1.30


kishor@kishor:~/dockerasignments/28/output$ ls -l
total 376
-rw-r--r-- 1 root root    89 Jun  2 16:11 count.20200602104133_0.log
-rw-r--r-- 1 root root    89 Jun  2 16:11 count.20200602104134_0.log
-rw-r--r-- 1 root root    89 Jun  2 16:11 count.20200602104135_0.log
-rw-r--r-- 1 root root    89 Jun  2 16:11 count.20200602104136_0.log

kishor@kishor:~/dockerasignments/28/output$ cat count.20200602104736_0.log
2020-06-02T10:47:36+00:00	count.format1	{"message":"1643: Tue Jun  2 10:47:36 UTC 2020"}

--------------------------------------------------------------------------------------------------------------------------------------------------------------



Good luck!
